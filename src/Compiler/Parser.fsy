%{
open Feint.Compiler
open Feint.Compiler.Util
%}

// Whitespace ----------------------------------------------------------

%token NL
%token <int> INDENT
%token DEDENT
%token EOF

// Comments ------------------------------------------------------------

%token <string> COMMENT
%token <string> DOC_COMMENT

// Scopes --------------------------------------------------------------

%token SCOPE_START
// %token SCOPE_END
%token INLINE_SCOPE_START
// %token INLINE_SCOPE_END

%token FUNC_START
%token INLINE_FUNC_START

// Groupings -----------------------------------------------------------

%token LPAREN
%token RPAREN
%token LBRACE
%token RBRACE
%token LBRACKET
%token RBRACKET

// Keywords ------------------------------------------------------------

%token NIL
%token TRUE
%token FALSE
%token BLOCK
%token IF
%token ELSE
%token MATCH
%token PRINT

// Types ---------------------------------------------------------------

%token <bigint> INT
%token <float> FLOAT
%token <string> STR

// Identifiers ---------------------------------------------------------

%token <string> IDENT
%token <string> SPECIAL_IDENT

%token COMMA

// Operators -----------------------------------------------------------

%token BANG
%token BANG_BANG

%token CARET
%token STAR
%token SLASH
%token DOUBLE_SLASH
%token PERCENT
%token PLUS
%token DASH

%token DOT

// Logic Operators -----------------------------------------------------

%token AND
%token OR
%token NIL_OR

// Comparison Operators ------------------------------------------------

%token DOLLAR_DOLLAR
%token DOLLAR_NOT
%token EQ_EQ_EQ
%token NOT_EQ_EQ
%token EQ_EQ
%token NOT_EQ
%token LT
%token LT_OR_EQ
%token GT
%token GT_OR_EQ

// In Place Operators --------------------------------------------------

%token MUL_EQ
%token DIV_EQ
%token ADD_EQ
%token SUB_EQ

// Assignment Operators ------------------------------------------------

%token EQ
%token FEED

// Associativity & Precedence (low to high) ----------------------------

%right EQ
%right FEED

%nonassoc SCOPE_START INLINE_SCOPE_START
%nonassoc FUNC_START INLINE_FUNC_START

%nonassoc ELSE

%left MUL_EQ
%left DIV_EQ
%left ADD_EQ
%left SUB_EQ

%left DOLLAR_DOLLAR
%left DOLLAR_NOT
%left EQ_EQ_EQ
%left NOT_EQ_EQ
%left EQ_EQ
%left NOT_EQ
%left LT
%left LT_OR_EQ
%left GT
%left GT_OR_EQ

%left AND
%left OR
%left NIL_OR

%left DASH
%left PLUS
%left SLASH
%left DOUBLE_SLASH
%left PERCENT
%left STAR

%right CARET

%nonassoc BANG_BANG BANG
%nonassoc LPAREN LBRACE LBRACKET
%nonassoc NIL TRUE FALSE INT FLOAT STR
%nonassoc PRINT

%left DOT

// Grammar -------------------------------------------------------------

%start Module
%type <Ast.Statement list> Module
%type <Ast.Statement list> StatementList
%type <Ast.Statement> Statement
%type <Ast.Statement> Comment
%type <Ast.Expr> Expr

%%

// Module --------------------------------------------------------------
//
// NOTE: All code is wrapped in a module.

Module:
  | EOF { [] }
  | StatementList { List.rev $1 }

// Statements ----------------------------------------------------------

StatementList:
  | Statement { [ $1 ] }
  | StatementList Statement { $2 :: $1 }

Statement:
  | Comment { $1 }
  | Expr NL { Ast.ExprStatement $1 }

Comment:
  | COMMENT { Ast.Comment $1 }
  | DOC_COMMENT { Ast.DocComment $1 }

// Expressions ---------------------------------------------------------

Expr:
  | Block { $1 }
  | Operation { $1 }
  | Assignment { $1 }
  | Atom { $1 }
  | PRINT Expr { Ast.Print [ $2 ] }
  | LPAREN Expr RPAREN { $2 }

Block:
  | BLOCK SCOPE_START StatementList { Ast.Block $3 }
  | BLOCK INLINE_SCOPE_START Expr { Ast.Block [ Ast.ExprStatement $3 ] }

Operation:
  | UnaryOp Expr { Ast.UnaryOp { op = $1; rhs = $2 } }
  | Expr BinaryOp Expr { Ast.BinaryOp { lhs = $1; op = $2; rhs = $3 } }
  | Expr ShortCircuitOp Expr { Ast.ShortCircuitOp { lhs = $1; op = $2; rhs = $3 } }
  | Expr CompareOp Expr { Ast.CompareOp { lhs = $1; op = $2; rhs = $3 } }
  | Expr InPlaceOp Expr { Ast.InPlaceOp { lhs = $1; op = $2; rhs = $3 } }

Assignment:
  | IDENT EQ Expr { Ast.Assignment { name = $1; value = $3 } }
  | IDENT FEED Expr { Ast.Reassignment { name = $1; value = $3 } }

Atom:
  | NIL { Ast.Nil }
  | TRUE { Ast.Bool true }
  | FALSE { Ast.Bool false }
  | INT { Ast.Int $1 }
  | FLOAT { Ast.Float $1 }
  | STR { Ast.Str $1 }
  | IDENT { Ast.Ident $1 }
  | SPECIAL_IDENT { Ast.SpecialIdent $1 }

// Operations ----------------------------------------------------------

UnaryOp:
  | BANG { Ast.Not }
  | BANG_BANG { Ast.AsBool }

BinaryOp:
  | CARET { Ast.Pow }
  | STAR { Ast.Mul }
  | SLASH { Ast.Div }
  | DOUBLE_SLASH { Ast.FloorDiv }
  | PERCENT { Ast.Mod }
  | PLUS { Ast.Add }
  | DASH { Ast.Sub }
  | DOT { Ast.Dot }

ShortCircuitOp:
  | AND { Ast.And }
  | OR { Ast.Or }
  | NIL_OR { Ast.NilOr }

CompareOp:
  | DOLLAR_DOLLAR { Ast.DollarDollar }
  | DOLLAR_NOT { Ast.DollarNot }
  | EQ_EQ_EQ { Ast.EqEqEq }
  | NOT_EQ_EQ { Ast.NotEqEq }
  | EQ_EQ { Ast.EqEq }
  | NOT_EQ { Ast.NotEq }
  | LT { Ast.LessThan }
  | LT_OR_EQ { Ast.LessThanEq }
  | GT { Ast.GreaterThan }
  | GT_OR_EQ { Ast.GreaterThanEq }

InPlaceOp:
  | MUL_EQ { Ast.MulEq }
  | DIV_EQ { Ast.DivEq }
  | ADD_EQ { Ast.AddEq }
  | SUB_EQ { Ast.SubEq }
