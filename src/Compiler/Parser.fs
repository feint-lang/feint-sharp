// Implementation file for parser generated by fsyacc
module Feint.Compiler.Parser

#nowarn "64" // turn off warnings that type variables used in production annotations are instantiated to concrete type

open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers

open Feint.Compiler
open Feint.Compiler.Util

// This type is the type of tokens accepted by the parser
type token =
    | FEED
    | EQ
    | SUB_EQ
    | ADD_EQ
    | DIV_EQ
    | MUL_EQ
    | GT_OR_EQ
    | GT
    | LT_OR_EQ
    | LT
    | NOT_EQ
    | EQ_EQ
    | NOT_EQ_EQ
    | EQ_EQ_EQ
    | DOLLAR_NOT
    | DOLLAR_DOLLAR
    | NIL_OR
    | OR
    | AND
    | DOT
    | DASH
    | PLUS
    | PERCENT
    | DOUBLE_SLASH
    | SLASH
    | STAR
    | CARET
    | BANG_BANG
    | BANG
    | COMMA
    | SPECIAL_IDENT of (string)
    | IDENT of (string)
    | STR of (string)
    | FLOAT of (float)
    | INT of (bigint)
    | PRINT
    | MATCH
    | ELSE
    | IF
    | BLOCK
    | FALSE
    | TRUE
    | NIL
    | RBRACKET
    | LBRACKET
    | RBRACE
    | LBRACE
    | RPAREN
    | LPAREN
    | INLINE_FUNC_START
    | FUNC_START
    | INLINE_SCOPE_START
    | SCOPE_START
    | DOC_COMMENT of (string)
    | COMMENT of (string)
    | EOF
    | DEDENT
    | INDENT of (int)
    | NL
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId =
    | TOKEN_FEED
    | TOKEN_EQ
    | TOKEN_SUB_EQ
    | TOKEN_ADD_EQ
    | TOKEN_DIV_EQ
    | TOKEN_MUL_EQ
    | TOKEN_GT_OR_EQ
    | TOKEN_GT
    | TOKEN_LT_OR_EQ
    | TOKEN_LT
    | TOKEN_NOT_EQ
    | TOKEN_EQ_EQ
    | TOKEN_NOT_EQ_EQ
    | TOKEN_EQ_EQ_EQ
    | TOKEN_DOLLAR_NOT
    | TOKEN_DOLLAR_DOLLAR
    | TOKEN_NIL_OR
    | TOKEN_OR
    | TOKEN_AND
    | TOKEN_DOT
    | TOKEN_DASH
    | TOKEN_PLUS
    | TOKEN_PERCENT
    | TOKEN_DOUBLE_SLASH
    | TOKEN_SLASH
    | TOKEN_STAR
    | TOKEN_CARET
    | TOKEN_BANG_BANG
    | TOKEN_BANG
    | TOKEN_COMMA
    | TOKEN_SPECIAL_IDENT
    | TOKEN_IDENT
    | TOKEN_STR
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_PRINT
    | TOKEN_MATCH
    | TOKEN_ELSE
    | TOKEN_IF
    | TOKEN_BLOCK
    | TOKEN_FALSE
    | TOKEN_TRUE
    | TOKEN_NIL
    | TOKEN_RBRACKET
    | TOKEN_LBRACKET
    | TOKEN_RBRACE
    | TOKEN_LBRACE
    | TOKEN_RPAREN
    | TOKEN_LPAREN
    | TOKEN_INLINE_FUNC_START
    | TOKEN_FUNC_START
    | TOKEN_INLINE_SCOPE_START
    | TOKEN_SCOPE_START
    | TOKEN_DOC_COMMENT
    | TOKEN_COMMENT
    | TOKEN_EOF
    | TOKEN_DEDENT
    | TOKEN_INDENT
    | TOKEN_NL
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId =
    | NONTERM__startModule
    | NONTERM_Module
    | NONTERM_StatementList
    | NONTERM_Statement
    | NONTERM_Comment
    | NONTERM_Expr
    | NONTERM_Block
    | NONTERM_Operation
    | NONTERM_Assignment
    | NONTERM_Atom
    | NONTERM_UnaryOp
    | NONTERM_BinaryOp
    | NONTERM_ShortCircuitOp
    | NONTERM_CompareOp
    | NONTERM_InPlaceOp

// This function maps tokens to integer indexes
let tagOfToken (t: token) =
    match t with
    | FEED -> 0
    | EQ -> 1
    | SUB_EQ -> 2
    | ADD_EQ -> 3
    | DIV_EQ -> 4
    | MUL_EQ -> 5
    | GT_OR_EQ -> 6
    | GT -> 7
    | LT_OR_EQ -> 8
    | LT -> 9
    | NOT_EQ -> 10
    | EQ_EQ -> 11
    | NOT_EQ_EQ -> 12
    | EQ_EQ_EQ -> 13
    | DOLLAR_NOT -> 14
    | DOLLAR_DOLLAR -> 15
    | NIL_OR -> 16
    | OR -> 17
    | AND -> 18
    | DOT -> 19
    | DASH -> 20
    | PLUS -> 21
    | PERCENT -> 22
    | DOUBLE_SLASH -> 23
    | SLASH -> 24
    | STAR -> 25
    | CARET -> 26
    | BANG_BANG -> 27
    | BANG -> 28
    | COMMA -> 29
    | SPECIAL_IDENT _ -> 30
    | IDENT _ -> 31
    | STR _ -> 32
    | FLOAT _ -> 33
    | INT _ -> 34
    | PRINT -> 35
    | MATCH -> 36
    | ELSE -> 37
    | IF -> 38
    | BLOCK -> 39
    | FALSE -> 40
    | TRUE -> 41
    | NIL -> 42
    | RBRACKET -> 43
    | LBRACKET -> 44
    | RBRACE -> 45
    | LBRACE -> 46
    | RPAREN -> 47
    | LPAREN -> 48
    | INLINE_FUNC_START -> 49
    | FUNC_START -> 50
    | INLINE_SCOPE_START -> 51
    | SCOPE_START -> 52
    | DOC_COMMENT _ -> 53
    | COMMENT _ -> 54
    | EOF -> 55
    | DEDENT -> 56
    | INDENT _ -> 57
    | NL -> 58

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx: int) =
    match tokenIdx with
    | 0 -> TOKEN_FEED
    | 1 -> TOKEN_EQ
    | 2 -> TOKEN_SUB_EQ
    | 3 -> TOKEN_ADD_EQ
    | 4 -> TOKEN_DIV_EQ
    | 5 -> TOKEN_MUL_EQ
    | 6 -> TOKEN_GT_OR_EQ
    | 7 -> TOKEN_GT
    | 8 -> TOKEN_LT_OR_EQ
    | 9 -> TOKEN_LT
    | 10 -> TOKEN_NOT_EQ
    | 11 -> TOKEN_EQ_EQ
    | 12 -> TOKEN_NOT_EQ_EQ
    | 13 -> TOKEN_EQ_EQ_EQ
    | 14 -> TOKEN_DOLLAR_NOT
    | 15 -> TOKEN_DOLLAR_DOLLAR
    | 16 -> TOKEN_NIL_OR
    | 17 -> TOKEN_OR
    | 18 -> TOKEN_AND
    | 19 -> TOKEN_DOT
    | 20 -> TOKEN_DASH
    | 21 -> TOKEN_PLUS
    | 22 -> TOKEN_PERCENT
    | 23 -> TOKEN_DOUBLE_SLASH
    | 24 -> TOKEN_SLASH
    | 25 -> TOKEN_STAR
    | 26 -> TOKEN_CARET
    | 27 -> TOKEN_BANG_BANG
    | 28 -> TOKEN_BANG
    | 29 -> TOKEN_COMMA
    | 30 -> TOKEN_SPECIAL_IDENT
    | 31 -> TOKEN_IDENT
    | 32 -> TOKEN_STR
    | 33 -> TOKEN_FLOAT
    | 34 -> TOKEN_INT
    | 35 -> TOKEN_PRINT
    | 36 -> TOKEN_MATCH
    | 37 -> TOKEN_ELSE
    | 38 -> TOKEN_IF
    | 39 -> TOKEN_BLOCK
    | 40 -> TOKEN_FALSE
    | 41 -> TOKEN_TRUE
    | 42 -> TOKEN_NIL
    | 43 -> TOKEN_RBRACKET
    | 44 -> TOKEN_LBRACKET
    | 45 -> TOKEN_RBRACE
    | 46 -> TOKEN_LBRACE
    | 47 -> TOKEN_RPAREN
    | 48 -> TOKEN_LPAREN
    | 49 -> TOKEN_INLINE_FUNC_START
    | 50 -> TOKEN_FUNC_START
    | 51 -> TOKEN_INLINE_SCOPE_START
    | 52 -> TOKEN_SCOPE_START
    | 53 -> TOKEN_DOC_COMMENT
    | 54 -> TOKEN_COMMENT
    | 55 -> TOKEN_EOF
    | 56 -> TOKEN_DEDENT
    | 57 -> TOKEN_INDENT
    | 58 -> TOKEN_NL
    | 61 -> TOKEN_end_of_input
    | 59 -> TOKEN_error
    | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx: int) =
    match prodIdx with
    | 0 -> NONTERM__startModule
    | 1 -> NONTERM_Module
    | 2 -> NONTERM_Module
    | 3 -> NONTERM_StatementList
    | 4 -> NONTERM_StatementList
    | 5 -> NONTERM_Statement
    | 6 -> NONTERM_Statement
    | 7 -> NONTERM_Comment
    | 8 -> NONTERM_Comment
    | 9 -> NONTERM_Expr
    | 10 -> NONTERM_Expr
    | 11 -> NONTERM_Expr
    | 12 -> NONTERM_Expr
    | 13 -> NONTERM_Expr
    | 14 -> NONTERM_Expr
    | 15 -> NONTERM_Block
    | 16 -> NONTERM_Block
    | 17 -> NONTERM_Operation
    | 18 -> NONTERM_Operation
    | 19 -> NONTERM_Operation
    | 20 -> NONTERM_Operation
    | 21 -> NONTERM_Operation
    | 22 -> NONTERM_Assignment
    | 23 -> NONTERM_Assignment
    | 24 -> NONTERM_Atom
    | 25 -> NONTERM_Atom
    | 26 -> NONTERM_Atom
    | 27 -> NONTERM_Atom
    | 28 -> NONTERM_Atom
    | 29 -> NONTERM_Atom
    | 30 -> NONTERM_Atom
    | 31 -> NONTERM_Atom
    | 32 -> NONTERM_UnaryOp
    | 33 -> NONTERM_UnaryOp
    | 34 -> NONTERM_BinaryOp
    | 35 -> NONTERM_BinaryOp
    | 36 -> NONTERM_BinaryOp
    | 37 -> NONTERM_BinaryOp
    | 38 -> NONTERM_BinaryOp
    | 39 -> NONTERM_BinaryOp
    | 40 -> NONTERM_BinaryOp
    | 41 -> NONTERM_BinaryOp
    | 42 -> NONTERM_ShortCircuitOp
    | 43 -> NONTERM_ShortCircuitOp
    | 44 -> NONTERM_ShortCircuitOp
    | 45 -> NONTERM_CompareOp
    | 46 -> NONTERM_CompareOp
    | 47 -> NONTERM_CompareOp
    | 48 -> NONTERM_CompareOp
    | 49 -> NONTERM_CompareOp
    | 50 -> NONTERM_CompareOp
    | 51 -> NONTERM_CompareOp
    | 52 -> NONTERM_CompareOp
    | 53 -> NONTERM_CompareOp
    | 54 -> NONTERM_CompareOp
    | 55 -> NONTERM_InPlaceOp
    | 56 -> NONTERM_InPlaceOp
    | 57 -> NONTERM_InPlaceOp
    | 58 -> NONTERM_InPlaceOp
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 61
let _fsyacc_tagOfErrorTerminal = 59

// This function gets the name of a token as a string
let token_to_string (t: token) =
    match t with
    | FEED -> "FEED"
    | EQ -> "EQ"
    | SUB_EQ -> "SUB_EQ"
    | ADD_EQ -> "ADD_EQ"
    | DIV_EQ -> "DIV_EQ"
    | MUL_EQ -> "MUL_EQ"
    | GT_OR_EQ -> "GT_OR_EQ"
    | GT -> "GT"
    | LT_OR_EQ -> "LT_OR_EQ"
    | LT -> "LT"
    | NOT_EQ -> "NOT_EQ"
    | EQ_EQ -> "EQ_EQ"
    | NOT_EQ_EQ -> "NOT_EQ_EQ"
    | EQ_EQ_EQ -> "EQ_EQ_EQ"
    | DOLLAR_NOT -> "DOLLAR_NOT"
    | DOLLAR_DOLLAR -> "DOLLAR_DOLLAR"
    | NIL_OR -> "NIL_OR"
    | OR -> "OR"
    | AND -> "AND"
    | DOT -> "DOT"
    | DASH -> "DASH"
    | PLUS -> "PLUS"
    | PERCENT -> "PERCENT"
    | DOUBLE_SLASH -> "DOUBLE_SLASH"
    | SLASH -> "SLASH"
    | STAR -> "STAR"
    | CARET -> "CARET"
    | BANG_BANG -> "BANG_BANG"
    | BANG -> "BANG"
    | COMMA -> "COMMA"
    | SPECIAL_IDENT _ -> "SPECIAL_IDENT"
    | IDENT _ -> "IDENT"
    | STR _ -> "STR"
    | FLOAT _ -> "FLOAT"
    | INT _ -> "INT"
    | PRINT -> "PRINT"
    | MATCH -> "MATCH"
    | ELSE -> "ELSE"
    | IF -> "IF"
    | BLOCK -> "BLOCK"
    | FALSE -> "FALSE"
    | TRUE -> "TRUE"
    | NIL -> "NIL"
    | RBRACKET -> "RBRACKET"
    | LBRACKET -> "LBRACKET"
    | RBRACE -> "RBRACE"
    | LBRACE -> "LBRACE"
    | RPAREN -> "RPAREN"
    | LPAREN -> "LPAREN"
    | INLINE_FUNC_START -> "INLINE_FUNC_START"
    | FUNC_START -> "FUNC_START"
    | INLINE_SCOPE_START -> "INLINE_SCOPE_START"
    | SCOPE_START -> "SCOPE_START"
    | DOC_COMMENT _ -> "DOC_COMMENT"
    | COMMENT _ -> "COMMENT"
    | EOF -> "EOF"
    | DEDENT -> "DEDENT"
    | INDENT _ -> "INDENT"
    | NL -> "NL"

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t: token) =
    match t with
    | FEED -> (null: System.Object)
    | EQ -> (null: System.Object)
    | SUB_EQ -> (null: System.Object)
    | ADD_EQ -> (null: System.Object)
    | DIV_EQ -> (null: System.Object)
    | MUL_EQ -> (null: System.Object)
    | GT_OR_EQ -> (null: System.Object)
    | GT -> (null: System.Object)
    | LT_OR_EQ -> (null: System.Object)
    | LT -> (null: System.Object)
    | NOT_EQ -> (null: System.Object)
    | EQ_EQ -> (null: System.Object)
    | NOT_EQ_EQ -> (null: System.Object)
    | EQ_EQ_EQ -> (null: System.Object)
    | DOLLAR_NOT -> (null: System.Object)
    | DOLLAR_DOLLAR -> (null: System.Object)
    | NIL_OR -> (null: System.Object)
    | OR -> (null: System.Object)
    | AND -> (null: System.Object)
    | DOT -> (null: System.Object)
    | DASH -> (null: System.Object)
    | PLUS -> (null: System.Object)
    | PERCENT -> (null: System.Object)
    | DOUBLE_SLASH -> (null: System.Object)
    | SLASH -> (null: System.Object)
    | STAR -> (null: System.Object)
    | CARET -> (null: System.Object)
    | BANG_BANG -> (null: System.Object)
    | BANG -> (null: System.Object)
    | COMMA -> (null: System.Object)
    | SPECIAL_IDENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x
    | IDENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x
    | STR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x
    | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x
    | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x
    | PRINT -> (null: System.Object)
    | MATCH -> (null: System.Object)
    | ELSE -> (null: System.Object)
    | IF -> (null: System.Object)
    | BLOCK -> (null: System.Object)
    | FALSE -> (null: System.Object)
    | TRUE -> (null: System.Object)
    | NIL -> (null: System.Object)
    | RBRACKET -> (null: System.Object)
    | LBRACKET -> (null: System.Object)
    | RBRACE -> (null: System.Object)
    | LBRACE -> (null: System.Object)
    | RPAREN -> (null: System.Object)
    | LPAREN -> (null: System.Object)
    | INLINE_FUNC_START -> (null: System.Object)
    | FUNC_START -> (null: System.Object)
    | INLINE_SCOPE_START -> (null: System.Object)
    | SCOPE_START -> (null: System.Object)
    | DOC_COMMENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x
    | COMMENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x
    | EOF -> (null: System.Object)
    | DEDENT -> (null: System.Object)
    | INDENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x
    | NL -> (null: System.Object)

let _fsyacc_gotos =
    [| 0us
       65535us
       1us
       65535us
       0us
       1us
       2us
       65535us
       0us
       3us
       22us
       5us
       4us
       65535us
       0us
       4us
       3us
       6us
       5us
       6us
       22us
       4us
       4us
       65535us
       0us
       7us
       3us
       7us
       5us
       7us
       22us
       7us
       14us
       65535us
       0us
       8us
       3us
       8us
       5us
       8us
       16us
       17us
       18us
       19us
       22us
       8us
       23us
       24us
       25us
       26us
       33us
       27us
       34us
       28us
       35us
       29us
       36us
       30us
       38us
       31us
       39us
       32us
       14us
       65535us
       0us
       12us
       3us
       12us
       5us
       12us
       16us
       12us
       18us
       12us
       22us
       12us
       23us
       12us
       25us
       12us
       33us
       12us
       34us
       12us
       35us
       12us
       36us
       12us
       38us
       12us
       39us
       12us
       14us
       65535us
       0us
       13us
       3us
       13us
       5us
       13us
       16us
       13us
       18us
       13us
       22us
       13us
       23us
       13us
       25us
       13us
       33us
       13us
       34us
       13us
       35us
       13us
       36us
       13us
       38us
       13us
       39us
       13us
       14us
       65535us
       0us
       14us
       3us
       14us
       5us
       14us
       16us
       14us
       18us
       14us
       22us
       14us
       23us
       14us
       25us
       14us
       33us
       14us
       34us
       14us
       35us
       14us
       36us
       14us
       38us
       14us
       39us
       14us
       14us
       65535us
       0us
       15us
       3us
       15us
       5us
       15us
       16us
       15us
       18us
       15us
       22us
       15us
       23us
       15us
       25us
       15us
       33us
       15us
       34us
       15us
       35us
       15us
       36us
       15us
       38us
       15us
       39us
       15us
       14us
       65535us
       0us
       25us
       3us
       25us
       5us
       25us
       16us
       25us
       18us
       25us
       22us
       25us
       23us
       25us
       25us
       25us
       33us
       25us
       34us
       25us
       35us
       25us
       36us
       25us
       38us
       25us
       39us
       25us
       11us
       65535us
       8us
       33us
       17us
       33us
       19us
       33us
       24us
       33us
       26us
       33us
       27us
       33us
       28us
       33us
       29us
       33us
       30us
       33us
       31us
       33us
       32us
       33us
       11us
       65535us
       8us
       34us
       17us
       34us
       19us
       34us
       24us
       34us
       26us
       34us
       27us
       34us
       28us
       34us
       29us
       34us
       30us
       34us
       31us
       34us
       32us
       34us
       11us
       65535us
       8us
       35us
       17us
       35us
       19us
       35us
       24us
       35us
       26us
       35us
       27us
       35us
       28us
       35us
       29us
       35us
       30us
       35us
       31us
       35us
       32us
       35us
       11us
       65535us
       8us
       36us
       17us
       36us
       19us
       36us
       24us
       36us
       26us
       36us
       27us
       36us
       28us
       36us
       29us
       36us
       30us
       36us
       31us
       36us
       32us
       36us |]

let _fsyacc_sparseGotoTableRowOffsets =
    [| 0us
       1us
       3us
       6us
       11us
       16us
       31us
       46us
       61us
       76us
       91us
       106us
       118us
       130us
       142us |]

let _fsyacc_stateToProdIdxsTableElements =
    [| 1us
       0us
       1us
       0us
       1us
       1us
       2us
       2us
       4us
       1us
       3us
       2us
       4us
       15us
       1us
       4us
       1us
       5us
       5us
       6us
       18us
       19us
       20us
       21us
       1us
       6us
       1us
       7us
       1us
       8us
       1us
       9us
       1us
       10us
       1us
       11us
       1us
       12us
       1us
       13us
       5us
       13us
       18us
       19us
       20us
       21us
       1us
       14us
       5us
       14us
       18us
       19us
       20us
       21us
       1us
       14us
       2us
       15us
       16us
       1us
       15us
       1us
       16us
       5us
       16us
       18us
       19us
       20us
       21us
       1us
       17us
       5us
       17us
       18us
       19us
       20us
       21us
       5us
       18us
       18us
       19us
       20us
       21us
       5us
       18us
       19us
       19us
       20us
       21us
       5us
       18us
       19us
       20us
       20us
       21us
       5us
       18us
       19us
       20us
       21us
       21us
       5us
       18us
       19us
       20us
       21us
       22us
       5us
       18us
       19us
       20us
       21us
       23us
       1us
       18us
       1us
       19us
       1us
       20us
       1us
       21us
       3us
       22us
       23us
       30us
       1us
       22us
       1us
       23us
       1us
       24us
       1us
       25us
       1us
       26us
       1us
       27us
       1us
       28us
       1us
       29us
       1us
       31us
       1us
       32us
       1us
       33us
       1us
       34us
       1us
       35us
       1us
       36us
       1us
       37us
       1us
       38us
       1us
       39us
       1us
       40us
       1us
       41us
       1us
       42us
       1us
       43us
       1us
       44us
       1us
       45us
       1us
       46us
       1us
       47us
       1us
       48us
       1us
       49us
       1us
       50us
       1us
       51us
       1us
       52us
       1us
       53us
       1us
       54us
       1us
       55us
       1us
       56us
       1us
       57us
       1us
       58us |]

let _fsyacc_stateToProdIdxsTableRowOffsets =
    [| 0us
       2us
       4us
       6us
       9us
       11us
       14us
       16us
       18us
       24us
       26us
       28us
       30us
       32us
       34us
       36us
       38us
       40us
       46us
       48us
       54us
       56us
       59us
       61us
       63us
       69us
       71us
       77us
       83us
       89us
       95us
       101us
       107us
       113us
       115us
       117us
       119us
       121us
       125us
       127us
       129us
       131us
       133us
       135us
       137us
       139us
       141us
       143us
       145us
       147us
       149us
       151us
       153us
       155us
       157us
       159us
       161us
       163us
       165us
       167us
       169us
       171us
       173us
       175us
       177us
       179us
       181us
       183us
       185us
       187us
       189us
       191us
       193us
       195us |]

let _fsyacc_action_rows = 74

let _fsyacc_actionTableElements =
    [| 16us
       32768us
       27us
       48us
       28us
       47us
       30us
       46us
       31us
       37us
       32us
       45us
       33us
       44us
       34us
       43us
       35us
       16us
       39us
       21us
       40us
       42us
       41us
       41us
       42us
       40us
       48us
       18us
       53us
       11us
       54us
       10us
       55us
       2us
       0us
       49152us
       0us
       16385us
       15us
       16386us
       27us
       48us
       28us
       47us
       30us
       46us
       31us
       37us
       32us
       45us
       33us
       44us
       34us
       43us
       35us
       16us
       39us
       21us
       40us
       42us
       41us
       41us
       42us
       40us
       48us
       18us
       53us
       11us
       54us
       10us
       0us
       16387us
       15us
       16399us
       27us
       48us
       28us
       47us
       30us
       46us
       31us
       37us
       32us
       45us
       33us
       44us
       34us
       43us
       35us
       16us
       39us
       21us
       40us
       42us
       41us
       41us
       42us
       40us
       48us
       18us
       53us
       11us
       54us
       10us
       0us
       16388us
       0us
       16389us
       26us
       32768us
       2us
       73us
       3us
       72us
       4us
       71us
       5us
       70us
       6us
       69us
       7us
       68us
       8us
       67us
       9us
       66us
       10us
       65us
       11us
       64us
       12us
       63us
       13us
       62us
       14us
       61us
       15us
       60us
       16us
       59us
       17us
       58us
       18us
       57us
       19us
       56us
       20us
       55us
       21us
       54us
       22us
       53us
       23us
       52us
       24us
       51us
       25us
       50us
       26us
       49us
       58us
       9us
       0us
       16390us
       0us
       16391us
       0us
       16392us
       0us
       16393us
       0us
       16394us
       0us
       16395us
       0us
       16396us
       13us
       32768us
       27us
       48us
       28us
       47us
       30us
       46us
       31us
       37us
       32us
       45us
       33us
       44us
       34us
       43us
       35us
       16us
       39us
       21us
       40us
       42us
       41us
       41us
       42us
       40us
       48us
       18us
       1us
       16397us
       19us
       56us
       13us
       32768us
       27us
       48us
       28us
       47us
       30us
       46us
       31us
       37us
       32us
       45us
       33us
       44us
       34us
       43us
       35us
       16us
       39us
       21us
       40us
       42us
       41us
       41us
       42us
       40us
       48us
       18us
       26us
       32768us
       2us
       73us
       3us
       72us
       4us
       71us
       5us
       70us
       6us
       69us
       7us
       68us
       8us
       67us
       9us
       66us
       10us
       65us
       11us
       64us
       12us
       63us
       13us
       62us
       14us
       61us
       15us
       60us
       16us
       59us
       17us
       58us
       18us
       57us
       19us
       56us
       20us
       55us
       21us
       54us
       22us
       53us
       23us
       52us
       24us
       51us
       25us
       50us
       26us
       49us
       47us
       20us
       0us
       16398us
       2us
       32768us
       51us
       23us
       52us
       22us
       15us
       32768us
       27us
       48us
       28us
       47us
       30us
       46us
       31us
       37us
       32us
       45us
       33us
       44us
       34us
       43us
       35us
       16us
       39us
       21us
       40us
       42us
       41us
       41us
       42us
       40us
       48us
       18us
       53us
       11us
       54us
       10us
       13us
       32768us
       27us
       48us
       28us
       47us
       30us
       46us
       31us
       37us
       32us
       45us
       33us
       44us
       34us
       43us
       35us
       16us
       39us
       21us
       40us
       42us
       41us
       41us
       42us
       40us
       48us
       18us
       25us
       16400us
       2us
       73us
       3us
       72us
       4us
       71us
       5us
       70us
       6us
       69us
       7us
       68us
       8us
       67us
       9us
       66us
       10us
       65us
       11us
       64us
       12us
       63us
       13us
       62us
       14us
       61us
       15us
       60us
       16us
       59us
       17us
       58us
       18us
       57us
       19us
       56us
       20us
       55us
       21us
       54us
       22us
       53us
       23us
       52us
       24us
       51us
       25us
       50us
       26us
       49us
       13us
       32768us
       27us
       48us
       28us
       47us
       30us
       46us
       31us
       37us
       32us
       45us
       33us
       44us
       34us
       43us
       35us
       16us
       39us
       21us
       40us
       42us
       41us
       41us
       42us
       40us
       48us
       18us
       25us
       16401us
       2us
       73us
       3us
       72us
       4us
       71us
       5us
       70us
       6us
       69us
       7us
       68us
       8us
       67us
       9us
       66us
       10us
       65us
       11us
       64us
       12us
       63us
       13us
       62us
       14us
       61us
       15us
       60us
       16us
       59us
       17us
       58us
       18us
       57us
       19us
       56us
       20us
       55us
       21us
       54us
       22us
       53us
       23us
       52us
       24us
       51us
       25us
       50us
       26us
       49us
       25us
       16402us
       2us
       73us
       3us
       72us
       4us
       71us
       5us
       70us
       6us
       69us
       7us
       68us
       8us
       67us
       9us
       66us
       10us
       65us
       11us
       64us
       12us
       63us
       13us
       62us
       14us
       61us
       15us
       60us
       16us
       59us
       17us
       58us
       18us
       57us
       19us
       56us
       20us
       55us
       21us
       54us
       22us
       53us
       23us
       52us
       24us
       51us
       25us
       50us
       26us
       49us
       25us
       16403us
       2us
       73us
       3us
       72us
       4us
       71us
       5us
       70us
       6us
       69us
       7us
       68us
       8us
       67us
       9us
       66us
       10us
       65us
       11us
       64us
       12us
       63us
       13us
       62us
       14us
       61us
       15us
       60us
       16us
       59us
       17us
       58us
       18us
       57us
       19us
       56us
       20us
       55us
       21us
       54us
       22us
       53us
       23us
       52us
       24us
       51us
       25us
       50us
       26us
       49us
       25us
       16404us
       2us
       73us
       3us
       72us
       4us
       71us
       5us
       70us
       6us
       69us
       7us
       68us
       8us
       67us
       9us
       66us
       10us
       65us
       11us
       64us
       12us
       63us
       13us
       62us
       14us
       61us
       15us
       60us
       16us
       59us
       17us
       58us
       18us
       57us
       19us
       56us
       20us
       55us
       21us
       54us
       22us
       53us
       23us
       52us
       24us
       51us
       25us
       50us
       26us
       49us
       25us
       16405us
       2us
       73us
       3us
       72us
       4us
       71us
       5us
       70us
       6us
       69us
       7us
       68us
       8us
       67us
       9us
       66us
       10us
       65us
       11us
       64us
       12us
       63us
       13us
       62us
       14us
       61us
       15us
       60us
       16us
       59us
       17us
       58us
       18us
       57us
       19us
       56us
       20us
       55us
       21us
       54us
       22us
       53us
       23us
       52us
       24us
       51us
       25us
       50us
       26us
       49us
       25us
       16406us
       2us
       73us
       3us
       72us
       4us
       71us
       5us
       70us
       6us
       69us
       7us
       68us
       8us
       67us
       9us
       66us
       10us
       65us
       11us
       64us
       12us
       63us
       13us
       62us
       14us
       61us
       15us
       60us
       16us
       59us
       17us
       58us
       18us
       57us
       19us
       56us
       20us
       55us
       21us
       54us
       22us
       53us
       23us
       52us
       24us
       51us
       25us
       50us
       26us
       49us
       25us
       16407us
       2us
       73us
       3us
       72us
       4us
       71us
       5us
       70us
       6us
       69us
       7us
       68us
       8us
       67us
       9us
       66us
       10us
       65us
       11us
       64us
       12us
       63us
       13us
       62us
       14us
       61us
       15us
       60us
       16us
       59us
       17us
       58us
       18us
       57us
       19us
       56us
       20us
       55us
       21us
       54us
       22us
       53us
       23us
       52us
       24us
       51us
       25us
       50us
       26us
       49us
       13us
       32768us
       27us
       48us
       28us
       47us
       30us
       46us
       31us
       37us
       32us
       45us
       33us
       44us
       34us
       43us
       35us
       16us
       39us
       21us
       40us
       42us
       41us
       41us
       42us
       40us
       48us
       18us
       13us
       32768us
       27us
       48us
       28us
       47us
       30us
       46us
       31us
       37us
       32us
       45us
       33us
       44us
       34us
       43us
       35us
       16us
       39us
       21us
       40us
       42us
       41us
       41us
       42us
       40us
       48us
       18us
       13us
       32768us
       27us
       48us
       28us
       47us
       30us
       46us
       31us
       37us
       32us
       45us
       33us
       44us
       34us
       43us
       35us
       16us
       39us
       21us
       40us
       42us
       41us
       41us
       42us
       40us
       48us
       18us
       13us
       32768us
       27us
       48us
       28us
       47us
       30us
       46us
       31us
       37us
       32us
       45us
       33us
       44us
       34us
       43us
       35us
       16us
       39us
       21us
       40us
       42us
       41us
       41us
       42us
       40us
       48us
       18us
       2us
       16414us
       0us
       39us
       1us
       38us
       13us
       32768us
       27us
       48us
       28us
       47us
       30us
       46us
       31us
       37us
       32us
       45us
       33us
       44us
       34us
       43us
       35us
       16us
       39us
       21us
       40us
       42us
       41us
       41us
       42us
       40us
       48us
       18us
       13us
       32768us
       27us
       48us
       28us
       47us
       30us
       46us
       31us
       37us
       32us
       45us
       33us
       44us
       34us
       43us
       35us
       16us
       39us
       21us
       40us
       42us
       41us
       41us
       42us
       40us
       48us
       18us
       0us
       16408us
       0us
       16409us
       0us
       16410us
       0us
       16411us
       0us
       16412us
       0us
       16413us
       0us
       16415us
       0us
       16416us
       0us
       16417us
       0us
       16418us
       0us
       16419us
       0us
       16420us
       0us
       16421us
       0us
       16422us
       0us
       16423us
       0us
       16424us
       0us
       16425us
       0us
       16426us
       0us
       16427us
       0us
       16428us
       0us
       16429us
       0us
       16430us
       0us
       16431us
       0us
       16432us
       0us
       16433us
       0us
       16434us
       0us
       16435us
       0us
       16436us
       0us
       16437us
       0us
       16438us
       0us
       16439us
       0us
       16440us
       0us
       16441us
       0us
       16442us |]

let _fsyacc_actionTableRowOffsets =
    [| 0us
       17us
       18us
       19us
       35us
       36us
       52us
       53us
       54us
       81us
       82us
       83us
       84us
       85us
       86us
       87us
       88us
       102us
       104us
       118us
       145us
       146us
       149us
       165us
       179us
       205us
       219us
       245us
       271us
       297us
       323us
       349us
       375us
       401us
       415us
       429us
       443us
       457us
       460us
       474us
       488us
       489us
       490us
       491us
       492us
       493us
       494us
       495us
       496us
       497us
       498us
       499us
       500us
       501us
       502us
       503us
       504us
       505us
       506us
       507us
       508us
       509us
       510us
       511us
       512us
       513us
       514us
       515us
       516us
       517us
       518us
       519us
       520us
       521us |]

let _fsyacc_reductionSymbolCounts =
    [| 1us
       1us
       1us
       1us
       2us
       1us
       2us
       1us
       1us
       1us
       1us
       1us
       1us
       2us
       3us
       3us
       3us
       2us
       3us
       3us
       3us
       3us
       3us
       3us
       1us
       1us
       1us
       1us
       1us
       1us
       1us
       1us
       1us
       1us
       1us
       1us
       1us
       1us
       1us
       1us
       1us
       1us
       1us
       1us
       1us
       1us
       1us
       1us
       1us
       1us
       1us
       1us
       1us
       1us
       1us
       1us
       1us
       1us
       1us |]

let _fsyacc_productionToNonTerminalTable =
    [| 0us
       1us
       1us
       2us
       2us
       3us
       3us
       4us
       4us
       5us
       5us
       5us
       5us
       5us
       5us
       6us
       6us
       7us
       7us
       7us
       7us
       7us
       8us
       8us
       9us
       9us
       9us
       9us
       9us
       9us
       9us
       9us
       10us
       10us
       11us
       11us
       11us
       11us
       11us
       11us
       11us
       11us
       12us
       12us
       12us
       13us
       13us
       13us
       13us
       13us
       13us
       13us
       13us
       13us
       13us
       14us
       14us
       14us
       14us |]

let _fsyacc_immediateActions =
    [| 65535us
       49152us
       16385us
       65535us
       16387us
       65535us
       16388us
       16389us
       65535us
       16390us
       16391us
       16392us
       16393us
       16394us
       16395us
       16396us
       65535us
       65535us
       65535us
       65535us
       16398us
       65535us
       65535us
       65535us
       65535us
       65535us
       65535us
       65535us
       65535us
       65535us
       65535us
       65535us
       65535us
       65535us
       65535us
       65535us
       65535us
       65535us
       65535us
       65535us
       16408us
       16409us
       16410us
       16411us
       16412us
       16413us
       16415us
       16416us
       16417us
       16418us
       16419us
       16420us
       16421us
       16422us
       16423us
       16424us
       16425us
       16426us
       16427us
       16428us
       16429us
       16430us
       16431us
       16432us
       16433us
       16434us
       16435us
       16436us
       16437us
       16438us
       16439us
       16440us
       16441us
       16442us |]

let _fsyacc_reductions =
    lazy
        [| (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               let _1 = parseState.GetInput(1) :?> Ast.Statement list in

               Microsoft.FSharp.Core.Operators.box (
                   (raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))): 'gentype__startModule
               ))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               Microsoft.FSharp.Core.Operators.box (([]): Ast.Statement list))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               let _1 = parseState.GetInput(1) :?> Ast.Statement list in
               Microsoft.FSharp.Core.Operators.box ((List.rev _1): Ast.Statement list))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               let _1 = parseState.GetInput(1) :?> Ast.Statement in
               Microsoft.FSharp.Core.Operators.box (([ _1 ]): Ast.Statement list))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               let _1 = parseState.GetInput(1) :?> Ast.Statement list in
               let _2 = parseState.GetInput(2) :?> Ast.Statement in
               Microsoft.FSharp.Core.Operators.box ((_2 :: _1): Ast.Statement list))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               let _1 = parseState.GetInput(1) :?> Ast.Statement in
               Microsoft.FSharp.Core.Operators.box ((_1): Ast.Statement))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               let _1 = parseState.GetInput(1) :?> Ast.Expr in
               Microsoft.FSharp.Core.Operators.box ((Ast.ExprStatement _1): Ast.Statement))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               let _1 = parseState.GetInput(1) :?> string in
               Microsoft.FSharp.Core.Operators.box ((Ast.Comment _1): Ast.Statement))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               let _1 = parseState.GetInput(1) :?> string in
               Microsoft.FSharp.Core.Operators.box ((Ast.DocComment _1): Ast.Statement))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               let _1 = parseState.GetInput(1) :?> 'gentype_Block in
               Microsoft.FSharp.Core.Operators.box ((_1): Ast.Expr))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               let _1 = parseState.GetInput(1) :?> 'gentype_Operation in
               Microsoft.FSharp.Core.Operators.box ((_1): Ast.Expr))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               let _1 = parseState.GetInput(1) :?> 'gentype_Assignment in
               Microsoft.FSharp.Core.Operators.box ((_1): Ast.Expr))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               let _1 = parseState.GetInput(1) :?> 'gentype_Atom in
               Microsoft.FSharp.Core.Operators.box ((_1): Ast.Expr))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               let _2 = parseState.GetInput(2) :?> Ast.Expr in
               Microsoft.FSharp.Core.Operators.box ((Ast.Print [ _2 ]): Ast.Expr))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               let _2 = parseState.GetInput(2) :?> Ast.Expr in Microsoft.FSharp.Core.Operators.box ((_2): Ast.Expr))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               let _3 = parseState.GetInput(3) :?> Ast.Statement list in
               Microsoft.FSharp.Core.Operators.box ((Ast.Block _3): 'gentype_Block))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               let _3 = parseState.GetInput(3) :?> Ast.Expr in
               Microsoft.FSharp.Core.Operators.box ((Ast.Block [ Ast.ExprStatement _3 ]): 'gentype_Block))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               let _1 = parseState.GetInput(1) :?> 'gentype_UnaryOp in
               let _2 = parseState.GetInput(2) :?> Ast.Expr in
               Microsoft.FSharp.Core.Operators.box ((Ast.UnaryOp { op = _1; rhs = _2 }): 'gentype_Operation))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               let _1 = parseState.GetInput(1) :?> Ast.Expr in
               let _2 = parseState.GetInput(2) :?> 'gentype_BinaryOp in
               let _3 = parseState.GetInput(3) :?> Ast.Expr in
               Microsoft.FSharp.Core.Operators.box ((Ast.BinaryOp { lhs = _1; op = _2; rhs = _3 }): 'gentype_Operation))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               let _1 = parseState.GetInput(1) :?> Ast.Expr in
               let _2 = parseState.GetInput(2) :?> 'gentype_ShortCircuitOp in
               let _3 = parseState.GetInput(3) :?> Ast.Expr in

               Microsoft.FSharp.Core.Operators.box (
                   (Ast.ShortCircuitOp { lhs = _1; op = _2; rhs = _3 }): 'gentype_Operation
               ))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               let _1 = parseState.GetInput(1) :?> Ast.Expr in
               let _2 = parseState.GetInput(2) :?> 'gentype_CompareOp in
               let _3 = parseState.GetInput(3) :?> Ast.Expr in

               Microsoft.FSharp.Core.Operators.box (
                   (Ast.CompareOp { lhs = _1; op = _2; rhs = _3 }): 'gentype_Operation
               ))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               let _1 = parseState.GetInput(1) :?> Ast.Expr in
               let _2 = parseState.GetInput(2) :?> 'gentype_InPlaceOp in
               let _3 = parseState.GetInput(3) :?> Ast.Expr in

               Microsoft.FSharp.Core.Operators.box (
                   (Ast.InPlaceOp { lhs = _1; op = _2; rhs = _3 }): 'gentype_Operation
               ))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               let _1 = parseState.GetInput(1) :?> string in
               let _3 = parseState.GetInput(3) :?> Ast.Expr in
               Microsoft.FSharp.Core.Operators.box ((Ast.Assignment { name = _1; value = _3 }): 'gentype_Assignment))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               let _1 = parseState.GetInput(1) :?> string in
               let _3 = parseState.GetInput(3) :?> Ast.Expr in
               Microsoft.FSharp.Core.Operators.box ((Ast.Reassignment { name = _1; value = _3 }): 'gentype_Assignment))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               Microsoft.FSharp.Core.Operators.box ((Ast.Nil): 'gentype_Atom))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               Microsoft.FSharp.Core.Operators.box ((Ast.Bool true): 'gentype_Atom))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               Microsoft.FSharp.Core.Operators.box ((Ast.Bool false): 'gentype_Atom))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               let _1 = parseState.GetInput(1) :?> bigint in
               Microsoft.FSharp.Core.Operators.box ((Ast.Int _1): 'gentype_Atom))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               let _1 = parseState.GetInput(1) :?> float in
               Microsoft.FSharp.Core.Operators.box ((Ast.Float _1): 'gentype_Atom))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               let _1 = parseState.GetInput(1) :?> string in
               Microsoft.FSharp.Core.Operators.box ((Ast.Str _1): 'gentype_Atom))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               let _1 = parseState.GetInput(1) :?> string in
               Microsoft.FSharp.Core.Operators.box ((Ast.Ident _1): 'gentype_Atom))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               let _1 = parseState.GetInput(1) :?> string in
               Microsoft.FSharp.Core.Operators.box ((Ast.SpecialIdent _1): 'gentype_Atom))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               Microsoft.FSharp.Core.Operators.box ((Ast.Not): 'gentype_UnaryOp))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               Microsoft.FSharp.Core.Operators.box ((Ast.AsBool): 'gentype_UnaryOp))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               Microsoft.FSharp.Core.Operators.box ((Ast.Pow): 'gentype_BinaryOp))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               Microsoft.FSharp.Core.Operators.box ((Ast.Mul): 'gentype_BinaryOp))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               Microsoft.FSharp.Core.Operators.box ((Ast.Div): 'gentype_BinaryOp))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               Microsoft.FSharp.Core.Operators.box ((Ast.FloorDiv): 'gentype_BinaryOp))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               Microsoft.FSharp.Core.Operators.box ((Ast.Mod): 'gentype_BinaryOp))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               Microsoft.FSharp.Core.Operators.box ((Ast.Add): 'gentype_BinaryOp))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               Microsoft.FSharp.Core.Operators.box ((Ast.Sub): 'gentype_BinaryOp))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               Microsoft.FSharp.Core.Operators.box ((Ast.Dot): 'gentype_BinaryOp))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               Microsoft.FSharp.Core.Operators.box ((Ast.And): 'gentype_ShortCircuitOp))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               Microsoft.FSharp.Core.Operators.box ((Ast.Or): 'gentype_ShortCircuitOp))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               Microsoft.FSharp.Core.Operators.box ((Ast.NilOr): 'gentype_ShortCircuitOp))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               Microsoft.FSharp.Core.Operators.box ((Ast.DollarDollar): 'gentype_CompareOp))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               Microsoft.FSharp.Core.Operators.box ((Ast.DollarNot): 'gentype_CompareOp))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               Microsoft.FSharp.Core.Operators.box ((Ast.EqEqEq): 'gentype_CompareOp))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               Microsoft.FSharp.Core.Operators.box ((Ast.NotEqEq): 'gentype_CompareOp))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               Microsoft.FSharp.Core.Operators.box ((Ast.EqEq): 'gentype_CompareOp))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               Microsoft.FSharp.Core.Operators.box ((Ast.NotEq): 'gentype_CompareOp))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               Microsoft.FSharp.Core.Operators.box ((Ast.LessThan): 'gentype_CompareOp))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               Microsoft.FSharp.Core.Operators.box ((Ast.LessThanEq): 'gentype_CompareOp))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               Microsoft.FSharp.Core.Operators.box ((Ast.GreaterThan): 'gentype_CompareOp))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               Microsoft.FSharp.Core.Operators.box ((Ast.GreaterThanEq): 'gentype_CompareOp))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               Microsoft.FSharp.Core.Operators.box ((Ast.MulEq): 'gentype_InPlaceOp))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               Microsoft.FSharp.Core.Operators.box ((Ast.DivEq): 'gentype_InPlaceOp))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               Microsoft.FSharp.Core.Operators.box ((Ast.AddEq): 'gentype_InPlaceOp))
           (fun (parseState: FSharp.Text.Parsing.IParseState) ->
               Microsoft.FSharp.Core.Operators.box ((Ast.SubEq): 'gentype_InPlaceOp)) |]

let tables: FSharp.Text.Parsing.Tables<_> =
    { reductions = _fsyacc_reductions.Value
      endOfInputTag = _fsyacc_endOfInputTag
      tagOfToken = tagOfToken
      dataOfToken = _fsyacc_dataOfToken
      actionTableElements = _fsyacc_actionTableElements
      actionTableRowOffsets = _fsyacc_actionTableRowOffsets
      stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements
      stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets
      reductionSymbolCounts = _fsyacc_reductionSymbolCounts
      immediateActions = _fsyacc_immediateActions
      gotos = _fsyacc_gotos
      sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets
      tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal
      parseError =
        (fun (ctxt: FSharp.Text.Parsing.ParseErrorContext<_>) ->
            match parse_error_rich with
            | Some f -> f ctxt
            | None -> parse_error ctxt.Message)
      numTerminals = 62
      productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable }

let engine lexer lexbuf startState =
    tables.Interpret(lexer, lexbuf, startState)

let Module lexer lexbuf : Ast.Statement list = engine lexer lexbuf 0 :?> _
